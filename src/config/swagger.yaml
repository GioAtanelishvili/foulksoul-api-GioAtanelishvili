openapi: 3.0.0
info:
  title: FolkSoul
  description: Platform for musical band, where you can get information about the band and its members.
  version: 1.0.0

servers:
  - url: https://folksoul-api.giorgi-atanelashvili.redberryinternship.ge/api
    description: Production server
  - url: http://localhost:8080/api
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    bandMemberQuery:
      in: query
      name: id
      required: true
      schema:
        type: string
      description: Band member ID

    socialMediaQuery:
      in: query
      name: id
      required: true
      schema:
        type: string
      description: Social media ID

    pageQuery:
      in: query
      name: page
      schema:
        type: number
      description: Page number

  schemas:
    BandMember:
      type: object
      required:
        - 'name'
        - 'instrument'
        - 'orbitRadius'
        - 'color'
        - 'biography'
      properties:
        name:
          type: string
          example: ბაბნიკა
          minLength: 3
          pattern: ^[\u10D0-\u10F0]+$
        instrument:
          type: string
          example: უკულელე
          minLength: 2
          pattern: ^[\u10D0-\u10F0]+$
        orbitRadius:
          type: number
          example: 6
          minimum: 0
        color:
          type: string
          example: '#F12AC7'
          pattern: ^#([0-9a-fA-F]){6}$
        biography:
          type: string
          example: ბიოგრაფია
          pattern: ^[\u10D0-\u10F0]+$

    SocialMedia:
      type: object
      required:
        - 'name'
        - 'url'
      properties:
        name:
          type: string
          example: Facebook
          minLength: 2
          pattern: ^[a-zA-Z0-9]+$
        url:
          type: string
          example: https://facebook.com
          format: uri

paths:
  /login:
    post:
      summary: Returns auth token.
      tags:
        - 'Auth'
      requestBody:
        description: A JSON object containing admin nickname and password.
        content:
          application/json:
            schema:
              type: object
              required:
                - 'nickname'
                - 'password'
              properties:
                nickname:
                  type: string
                  minLength: 3
                  pattern: '^[a-zA-Z0-9]{3,}$'
                  example: zazaevich
                password:
                  type: string
                  format: password
                  minLength: 3
                  example: motoburti
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: xxxxx.yyyyy.zzzzz
        '422':
          description: Invalid credentials

  /band/members:
    get:
      summary: Returns all members of the band.
      parameters:
        - $ref: '#/components/parameters/pageQuery'
      tags:
        - 'Band Members'
      responses:
        '200':
          description: A JSON array containing all members of the band.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        _id:
                          type: string
                          example: some-ID
                    - $ref: '#/components/schemas/BandMember'
                    - type: object
                      properties:
                        avatarPath:
                          type: string
                          example: path/to/avatar.png

  /band/member:
    post:
      summary: Adds new member to band.
      security:
        - bearerAuth: []
      tags:
        - 'Band Members'
      requestBody:
        description: A JSON object containing details about new member.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BandMember'
      responses:
        '201':
          description: New member populated with its ID.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      _id:
                        type: string
                        example: some-ID
                  - $ref: '#/components/schemas/BandMember'
                  - type: object
                    properties:
                      avatarPath:
                        type: string
                        example: path/to/avatar.png
        '422':
          description: Invalid data

    patch:
      summary: Edits exisitng member.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/bandMemberQuery'
      tags:
        - 'Band Members'
      requestBody:
        description: A JSON object containing details about member.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BandMember'
      responses:
        '200':
          description: OK
        '404':
          description: Member doesn't exist
        '422':
          description: Invalid data

    delete:
      summary: Deletes exisitng member.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/bandMemberQuery'
      tags:
        - 'Band Members'
      responses:
        '200':
          description: OK
        '404':
          description: Member doesn't exist

  /band/member/avatar:
    put:
      summary: Uploads band member's avatar.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/bandMemberQuery'
      tags:
        - 'Band Members'
      requestBody:
        required: true
        description: Band member's avatar image (png/jpg/jpeg).
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - 'avatar'
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
        '422':
          description: Invalid file

  /band/social-media:
    get:
      summary: Returns band's social media.
      tags:
        - 'Social Media'
      responses:
        '200':
          description: A JSON array containing band's social media objects
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        _id:
                          type: string
                          example: some-ID
                    - $ref: '#/components/schemas/SocialMedia'
                    - type: object
                      properties:
                        iconPath:
                          type: string
                          example: path/to/icon.png

    post:
      summary: Adds new social media.
      security:
        - bearerAuth: []
      tags:
        - 'Social Media'
      requestBody:
        required: true
        description: JSON object containing info about social media.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMedia'
      responses:
        '201':
          description: OK
        '422':
          description: Invalid data

    patch:
      summary: Edits existing social media.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/socialMediaQuery'
      tags:
        - 'Social Media'
      requestBody:
        required: true
        description: JSON object containing info about social media.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMedia'
      responses:
        '200':
          description: OK
        '404':
          description: Social media doesn't exist
        '422':
          description: Invalid data

    delete:
      summary: Deletes existing social media.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/socialMediaQuery'
      tags:
        - 'Social Media'
      responses:
        '200':
          description: OK
        '404':
          description: Social media doesn't exist

  /band/social-media/icon:
    put:
      summary: Uploads social media icon.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/socialMediaQuery'
      tags:
        - 'Social Media'
      requestBody:
        required: true
        description: Social media icon (png/jpg/jpeg).
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - 'icon'
              properties:
                icon:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
        '422':
          description: Invalid file

  /band:
    get:
      summary: Returns details about band.
      tags:
        - 'Band Details'
      responses:
        '200':
          description: A JSON object containing band info and image path.
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: ინფორმაცია ბენდის შესახებ
                  imagePath:
                    type: string
                    example: path/to/image.png

  /band/info:
    put:
      summary: Adds info about the band.
      security:
        - bearerAuth: []
      tags:
        - 'Band Details'
      requestBody:
        description: A JSON object containing info about the band.
        content:
          application/json:
            schema:
              type: object
              properties:
                info:
                  type: string
                  example: Some infomration about the band
              required:
                - 'info'
      responses:
        '200':
          description: OK
        '422':
          description: Invalid data

  /band/image:
    put:
      summary: Uploads band image.
      security:
        - bearerAuth: []
      tags:
        - 'Band Details'
      requestBody:
        required: true
        description: Band image (png/jpg/jpeg).
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - 'image'
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
        '422':
          description: Invalid file
