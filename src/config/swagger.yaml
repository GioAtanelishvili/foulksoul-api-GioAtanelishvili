openapi: 3.0.0
info:
  title: FolkSoul
  description: Platform for musical band, where you can get information about the band and its members.
  version: 1.0.0

servers:
  - url: https://folksoul-api.giorgi-atanelashvili.redberryinternship.ge/api
    description: Production server
  - url: http://localhost:3000/api
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    bandMemberQuery:
      in: query
      name: id
      required: true
      schema:
        type: string
      description: Band member ID

  schemas:
    BandMember:
      type: object
      required:
        - 'name'
        - 'instrument'
        - 'orbitRadius'
        - 'color'
        - 'biography'
      properties:
        name:
          type: string
          example: ბაბნიკა
          minLength: 3
          pattern: ^[\u10D0-\u10F0]+$
        instrument:
          type: string
          example: უკულელე
          minLength: 2
          pattern: ^[\u10D0-\u10F0]+$
        orbitRadius:
          type: number
          example: 6
          minimum: 0
        color:
          type: string
          example: '#F12AC7'
          pattern: ^#([0-9a-fA-F]){6}$
        biography:
          type: string
          example: ბიოგრაფია
          pattern: ^[\u10D0-\u10F0]+$

paths:
  /login:
    post:
      summary: Returns auth token.
      tags:
        - 'Auth'
      requestBody:
        description: A JSON object containing user nickname and password.
        content:
          application/json:
            schema:
              type: object
              required:
                - 'nickname'
                - 'password'
              properties:
                nickname:
                  type: string
                  minLength: 3
                  pattern: '^[a-zA-Z0-9]{3,}$'
                  example: zazaevich
                password:
                  type: string
                  format: password
                  minLength: 3
                  example: motoburti
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: xxxxx.yyyyy.zzzzz
        '422':
          description: Invalid credentials

  /band/member:
    post:
      summary: Adds new member to band.
      security:
        - bearerAuth: []
      tags:
        - 'Band Members'
      requestBody:
        description: A JSON object containing details about new member.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BandMember'
      responses:
        '201':
          description: OK
        '422':
          description: Invalid data

    patch:
      summary: Edits exisitng member.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/bandMemberQuery'
      tags:
        - 'Band Members'
      requestBody:
        description: A JSON object containing details about member.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BandMember'
      responses:
        '200':
          description: OK
        '404':
          description: Member doesn't exist
        '422':
          description: Invalid data

    delete:
      summary: Deletes exisitng member.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/bandMemberQuery'
      tags:
        - 'Band Members'
      responses:
        '200':
          description: OK
        '404':
          description: Member doesn't exist
